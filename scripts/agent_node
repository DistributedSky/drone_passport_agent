#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# System
import smtplib
import threading

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from ethereum_common.msg import UInt256
from ethereum_common.srv import BlockNumber
from ipfs_common.msg import Multihash
from robonomics_msgs.msg import Demand, Offer, Result
from robonomics_liability.msg import Liability
from robonomics_liability.srv import *

'''

pilot_reg

self.current_job['success'] = True
'''


class Agent:
    current_job = {'id_serial': None,
                   'email': None,
                   'drone_type': None,
                   'drone_make': None,
                   'drone_model': None,
                   'id_reg': None,
                   'pilot_name': None,
                   'pilot_reg': None
                   }
    liability = None

    def __init__(self):
        rospy.init_node('agent')

        self.model = rospy.get_param('~model')
        self.token = rospy.get_param('~token')
        self.offer_lifetime = rospy.get_param('~offer_lifetime')

        self.signing_offer = rospy.Publisher(
            '/liability/infochan/eth/signing/offer', Offer, queue_size=128)

        def on_incoming_demand(incoming_demand):
            rospy.loginfo('Incoming demand:\n' + str(incoming_demand))
            if incoming_demand.model.multihash == self.model and incoming_demand.token.address == self.token:
                rospy.loginfo('For my model and token.')
                self.make_offer(incoming_demand)
            else:
                rospy.loginfo('Not fits, skip.')
        rospy.Subscriber('/liability/infochan/incoming/demand',
                         Demand, on_incoming_demand)

        def on_liability(msg):
            self.liability = msg.address.address
            rospy.loginfo('Liaility addr: ' + self.liability)

            prefix = '/liability/eth_' + self.liability

            rospy.Subscriber(prefix + '/id_serial', String, self.on_id_serial)
            rospy.Subscriber(prefix + '/email', String, self.on_email)
            rospy.Subscriber(prefix + '/drone_type', String, self.on_drone_type)
            rospy.Subscriber(prefix + '/drone_make', String, self.on_drone_make)
            rospy.Subscriber(prefix + '/drone_model', String, self.on_drone_model)
            rospy.Subscriber(prefix + '/id_reg', String, self.on_id_reg)
            rospy.Subscriber(prefix + '/pilot_name', String, self.on_pilot_name)
            rospy.Subscriber(prefix + '/pilot_reg', String, self.on_pilot_reg)

            rospy.wait_for_service('/liability/start')
            rospy.ServiceProxy('/liability/start',
                               StartLiability)(StartLiabilityRequest(address=self.liability))
        rospy.Subscriber('/liability/ready', Liability, on_liability)

        self.result_topics = dict()
        self.result_topics['id_serial'] = rospy.Publisher('result/id_serial', String, queue_size=10)
        self.result_topics['email'] = rospy.Publisher('result/email', String, queue_size=10)
        self.result_topics['drone_type'] = rospy.Publisher(
            'result/drone_type', String, queue_size=10)
        self.result_topics['drone_make'] = rospy.Publisher(
            'result/drone_make', String, queue_size=10)
        self.result_topics['drone_model'] = rospy.Publisher(
            'result/drone_model', String, queue_size=10)
        self.result_topics['id_reg'] = rospy.Publisher('result/id_reg', String, queue_size=10)
        self.result_topics['pilot_name'] = rospy.Publisher(
            'result/pilot_name', String, queue_size=10)
        self.result_topics['pilot_reg'] = rospy.Publisher('result/pilot_reg', String, queue_size=10)

        rospy.wait_for_service('/liability/finish')
        self.finish = rospy.ServiceProxy('/liability/finish', FinishLiability)

        threading.Thread(target=self.process, daemon=True).start()
        rospy.loginfo('Node ' + rospy.get_name() + ' started.')

    def on_id_serial(self, msg):
        self.current_job['id_serial'] = msg.data
        rospy.loginfo("ID serail: " + msg.data)

    def on_email(self, msg):
        self.current_job['email'] = msg.data
        rospy.loginfo('Email: ' + msg.data)

    def on_drone_type(self, msg):
        self.current_job['drone_type'] = msg.data
        rospy.loginfo('Drone type: ' + msg.data)

    def on_drone_make(self, msg):
        self.current_job['drone_make'] = msg.data
        rospy.loginfo('Drone make: ' + msg.data)

    def on_drone_model(self, msg):
        self.current_job['drone_model'] = msg.data
        rospy.loginfo('Drone model: ' + msg.data)

    def on_id_reg(self, msg):
        self.current_job['id_reg'] = msg.data
        rospy.loginfo('Drone reg: ' + msg.data)

    def on_pilot_name(self, msg):
        self.current_job['pilot_name'] = msg.data
        rospy.loginfo('Pilot name: ' + msg.data)

    def on_pilot_reg(self, msg):
        self.current_job['pilot_reg'] = msg.data
        rospy.loginfo('Pilot reg: ' + msg.data)

    def make_deadline(self):
        rospy.wait_for_service('/eth/current_block')
        block_srv = rospy.ServiceProxy('/eth/current_block', BlockNumber)
        deadline = block_srv().number + self.offer_lifetime

        return UInt256(str(deadline))

    def make_offer(self, incoming_demand):
        rospy.loginfo('Making offer...')

        offer = Offer()
        offer.model = Multihash(multihash=self.model)
        offer.objective = incoming_demand.objective
        offer.token = incoming_demand.token
        offer.cost = UInt256("0")
        offer.validator = incoming_demand.validator
        offer.lighthouse = incoming_demand.lighthouse
        offer.lighthouseFee = UInt256("0")
        offer.deadline = self.make_deadline()
        rospy.loginfo(offer)
        self.signing_offer.publish(offer)

    def process(self):
        while True:
            while not all(self.current_job.values()) or not self.liability:
                rospy.sleep(1)
            rospy.sleep(5)
            rospy.loginfo('Starting process: ' + str(self.current_job))

            for param, publisher in self.result_topics.items():
                publisher.publish(publisher.data_class(data=self.current_job[param]))
                rospy.loginfo(param)
                rospy.loginfo(publisher.data_class(data=self.current_job[param]))

            self.finish(FinishLiabilityRequest(address=self.liability, success=True))
            result = rospy.wait_for_message('/liability/infochan/incoming/result', Result)
            self._send_email(rospy.get_param('~admin_email'),
                             self.current_job, result.result.multihash)  # to admin
            # to registrant
            self._send_email(self.current_job['email'], self.current_job, result.result.multihash)
            rospy.loginfo('Process complete.')
            self.current_job = dict.fromkeys(self.current_job, None)
            self.liability = None

    def _send_email(self, addr: str, job, reg_hash: str):
        rospy.loginfo("Sending an email to {}".format(addr))
        login = rospy.get_param("~login")
        email_from = rospy.get_param("~email_from")
        if not email_from:
            email_from = login

        try:
            serv = smtplib.SMTP(rospy.get_param('~smtp_provider'),
                                int(rospy.get_param('~smtp_port')))
            serv.ehlo()
            serv.starttls()
            # serv.ehlo()
            serv.login(login, rospy.get_param('~email_password'))
        except:
            rospy.loginfo("Error while sending an email")

        reg_link = 'http://ipfs.io/ipfs/' + reg_hash
        liability_link = 'https://etherscan.io/address/{}#readContract'.format(self.liability)
        drone_register_line = "https://drone-employee.com/#/passport/{}".format(
            self.liability)
        footer = '\n--\nBest regards,\nDrone registrating AIRA.'
        msg = '\r\n'.join([
            'From: {}'.format(email_from),
            'To: {}'.format(addr),
            'Subject: Drone registration',
            '',
            'Name {} registered by {} at liability {}. Registration file: {}. Look at the liability at {}.{}'
            .format(job['id_serial'], job['email'], liability_link, reg_link, drone_register_line, footer)
        ])
        serv.sendmail(login, addr, msg)
        rospy.loginfo("Successfully sent!")
        serv.quit()

    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    Agent().spin()
