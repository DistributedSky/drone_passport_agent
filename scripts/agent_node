#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# System
import smtplib
import threading

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from ethereum_common.msg import UInt256
from ethereum_common.srv import BlockNumber
from ipfs_common.msg import Multihash
from robonomics_msgs.msg import Demand, Offer, Result
from robonomics_liability.msg import Liability
from robonomics_liability.srv import *

# This package
from de_direct.ipfs_utils import ipfs_download

class Agent:
    liability = None

    def __init__(self):
        rospy.init_node('agent')

        self.model = rospy.get_param('~model')
        self.token = rospy.get_param('~token')
        self.offer_lifetime = rospy.get_param('~offer_lifetime')

        self.signing_offer = rospy.Publisher('/liability/infochan/eth/signing/offer', Offer, queue_size=128)

        def on_incoming_demand(incoming_demand):
            rospy.loginfo('Incoming demand:\n' + str(incoming_demand))
            if incoming_demand.model.multihash == self.model and incoming_demand.token.address == self.token:
                rospy.loginfo('For my model and token.')
                self.make_offer(incoming_demand)
            else:
                rospy.loginfo('Not fits, skip.')
        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, on_incoming_demand)

        def on_liability(msg):
            if msg.model.multihash != rospy.get_param('~model'):
                rospy.loginfo("The liability is not for me")
                return

            self.liability = msg.address
            rospy.loginfo('Liaility addr: ' + self.liability.address)

            rospy.wait_for_service('/liability/start')
            rospy.ServiceProxy('/liability/start', StartLiability)(StartLiabilityRequest(address=self.liability))

            rospy.sleep(4) # wait to register topics

            objective = ipfs_download(msg.objective)

            rospy.loginfo("Objective is:\n{}".format(objective))

            # to admin
            self._send_email(rospy.get_param('~admin_email'), objective)
            # to registrant
            self._send_email(objective['/email'].data, objective)

            rospy.sleep(2)
            self.finish(FinishLiabilityRequest(address=self.liability, success=True))
            self.liability = None
            rospy.loginfo('Process complete.')
        rospy.Subscriber('/liability/ready', Liability, on_liability)

        rospy.wait_for_service('/liability/finish')
        self.finish = rospy.ServiceProxy('/liability/finish', FinishLiability)
        rospy.loginfo('Node ' + rospy.get_name() + ' started.')

    def make_deadline(self):
        rospy.wait_for_service('/eth/current_block')
        block_srv = rospy.ServiceProxy('/eth/current_block', BlockNumber)
        deadline = block_srv().number + self.offer_lifetime

        return UInt256(str(deadline))

    def make_offer(self, incoming_demand):
        rospy.loginfo('Making offer...')

        offer = Offer()
        offer.model = Multihash(multihash=self.model)
        offer.objective = incoming_demand.objective
        offer.token = incoming_demand.token
        offer.cost = incoming_demand.cost
        offer.validator = incoming_demand.validator
        offer.lighthouse = incoming_demand.lighthouse
        offer.lighthouseFee = UInt256("0")
        offer.deadline = self.make_deadline()
        rospy.loginfo(offer)
        self.signing_offer.publish(offer)

    def _send_email(self, addr: str, job):
        rospy.loginfo("Sending an email to {}".format(addr))
        login = rospy.get_param("~login")
        email_from = rospy.get_param("~email_from")
        if not email_from:
            email_from = login

        try:
            serv = smtplib.SMTP(rospy.get_param('~smtp_provider'), int(rospy.get_param('~smtp_port')))
            serv.ehlo()
            serv.starttls()
            # serv.ehlo()
            serv.login(login, rospy.get_param('~email_password'))
        except:
            rospy.loginfo("Error while sending an email")

        liability_link = 'https://etherscan.io/address/{}#readContract'.format(self.liability.address)
        drone_register_line = "https://drone-employee.com/#/passport/{}".format(self.liability.address)
        footer = '\n--\nBest regards,\nDrone registrating AIRA.'
        msg = '\r\n'.join([
            'From: {}'.format(email_from),
            'To: {}'.format(addr),
            'Subject: Drone registration',
            '',
            'Name {} registered by {} at liability {}. Look at the liability at {}.{}'
            .format(job['/id_serial'].data, job['/email'].data, liability_link, drone_register_line, footer)
        ])
        serv.sendmail(login, addr, msg)
        rospy.loginfo("Successfully sent!")
        serv.quit()

    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    Agent().spin()
